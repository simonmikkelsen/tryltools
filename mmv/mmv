#!/usr/bin/python

import sys, getopt, sr, shutil

def main(argv):
	try:
		opts, files = getopt.getopt(argv[1:], "hvqnlus:r:p:a:A:",
		             ["help", "verbose", "dry-run", "lower-case", "upper-case"
		              "search=", "replace=", "prefix=", "append=", "append-ext=",
		              "parents", "quiet"])
	except getopt.GetoptError, err:
		print str(err)
		sys.exit(2)

	verbose = False
	quiet = False
	dryrun = False
	makeParentDirs = False 
	cmdMgr = sr.CmdManager()
	for switch, value in opts:
		if switch in ("-h", "--help"):
			printHelp()
			sys.exit(0)
		elif switch in ("-v", "--verbose"):
			verbose = True
		elif switch in ("-q", "--quiet"):
			quiet = True
		elif switch in ("-n", "--dry-run"):
			dryrun = True
		elif switch in ("-s", "--search"):
			cmdMgr.add(sr.Search(value))
		elif switch in ("-r", "--replace"):
			cmdMgr.add(sr.Delete())
			cmdMgr.add(sr.Insert(value))
		elif switch in ("-p", "--prefix"):
			cmdMgr.add(sr.Prefix())
			cmdMgr.add(sr.Insert(value))
		elif switch in ("-a", "--append"):
			cmdMgr.add(sr.Append())
			cmdMgr.add(sr.Insert(value))
		elif switch in ("-A", "--append-ext"):
			append = sr.Append()
			append.setAppendExtension(True)
			cmdMgr.add(append)
			cmdMgr.add(sr.Insert(value))
		elif switch in ("-l", "--lower-case"):
			cmdMgr.add(sr.Everything())
			cmdMgr.add(sr.Lowercase())
		elif switch in ("-u", "--upper-case"):
			cmdMgr.add(sr.Everything())
			cmdMgr.add(sr.Uppercase())
		elif switch in ("--parents"):
			makeParentDirs = True
			# TODO make this
			print "Creating non existing dirs not yet supported..."
		else:
			print "Unknown switch: " + switch
			sys.exit(2)
	
	for file in files:
		destFile = cmdMgr.execute(file)
		if not quiet:
			print file + " => " + destFile
		if not dryrun:
			shutil.move(file, destFile)

def printHelp():
	print "Multi mover: Rename multiple files or folders using general and"
	print "             flexible rules."
	print ""
	print "Usage: mmv [-h] [-v] [-n] [-l] [-u] [-s search] [-r replace] [-p prefix]"
	print "           [-a append] [-A apennd-after-ext]"
	print ""
	print "       -h --help  Print this help and exit."
	print "       -v --verbose Print extra output during operation."
	print "       -n --dry-run Do not rename any files. Should be used in"
	print "                    combination with -v."
	print "       --parent     When operating on both file and path, try to"
	print "                    create non existing dirs (like mkdir --parent)."
	print "                    BE CAREFULL: You can quickly end up with a whole"
	print "                    lot of wird directories!"
	print "       -o --operate [pfe] Give at least one or all of these letters."
	print "               Not implemented yet!"
			#TODO Make an implementation
	print "                    p Operate on the path part. You might have to use"
	print "                      the --parent switch."
	print "                    f Operate on the file name. Only giving this is default"
	print "                      on the long term, but current implementation uses pfe."
	print "                    e Operate on the file extension."
	print ""
	print "String operations:"
	print "       -l --lower-case Make the latest marked text lower case."
	print "       -u --upper-case Make the latest marked text upper case."
	print "       -s --search  Find the given text and mark it. Use e.g."
	print "                    -r to actually replace it."
	print "       -r --replace Replaces the latest marked text with the given"
	print "                    text. Usually the text has been marked using -s."
	print "       -p --prefix  Insert the given string before the treated string."
	print "       -a --append  Append the given string to the treated file name"
	print "                    BUT before the file extension (thus leaving the ext)."
	print "       -A --append-ext Append the given string to the treated string,"
	print "                    not taking any file extension into account."

# Run the program.
if __name__ == "__main__":
	main(sys.argv)
